[["index.html", " telegram    R              ", "  telegram    R   2020-11-18    telegram     ,    ,  , ,     .       ,           .       telegram   : ,   ,    ,     ,      .         telegram     R.   ,    .       R  Telegram,        ,       .      R       telegram.bot.       ,  ,          .             ,      .             R.              R:    , ..    .    .      .    .        dplyr.     ,   API.        ,        R  -.      ,   10     .  2016        -  Netpeak.      R:  R   -    R   Excel.  2015      ,          120     .   ,             .  2018   telegram  R4marketing,    ,     R:   , , ,     R.  2020   YouTube ,        R    .           ,       ,         .   ,       ,     ,   ,       .         ,    Telegram. Email: selesnow@gmail.com Telegram: AlexeySeleznev   ,        ,               . "],["-telegram-1.html", " 1  ,        telegram (1) 1.1    1.2         R 1.3    R  Telegram 1.4    telegram  1.5     Emoji 1.6    Windows,     ,      1.7      1.8  1.9   ", "  1  ,        telegram (1)         ,        telegram. 1.1         .       BotFather,       /start.        : I can help you create and manage Telegram bots. If you&#39;re new to the Bot API, please see the manual (https://core.telegram.org/bots). You can control me by sending these commands: /newbot - create a new bot /mybots - edit your bots [beta] Edit Bots /setname - change a bot&#39;s name /setdescription - change bot description /setabouttext - change bot about info /setuserpic - change bot profile photo /setcommands - change the list of commands /deletebot - delete a bot Bot Settings /token - generate authorization token /revoke - revoke bot access token /setinline - toggle inline mode (https://core.telegram.org/bots/inline) /setinlinegeo - toggle inline location requests (https://core.telegram.org/bots/inline#location-based-results) /setinlinefeedback - change inline feedback (https://core.telegram.org/bots/inline#collecting-feedback) settings /setjoingroups - can your bot be added to groups? /setprivacy - toggle privacy mode (https://core.telegram.org/bots#privacy-mode) in groups Games /mygames - edit your games (https://core.telegram.org/bots/games) [beta] /newgame - create a new game (https://core.telegram.org/bots/games) /listgames - get a list of your games /editgame - edit a game /deletegame - delete an existing game       /newbot. BotFather       . BotFather, [25.07.20 09:39] Alright, a new bot. How are we going to call it? Please choose a name for your bot. Alexey Seleznev, [25.07.20 09:40] My Test Bot BotFather, [25.07.20 09:40] Good. Now let&#39;s choose a username for your bot. It must end in `bot`. Like this, for example: TetrisBot or tetris_bot. Alexey Seleznev, [25.07.20 09:40] @my_test_bot     ,      bot.     ,    : Done! Congratulations on your new bot. You will find it at t.me/my_test_bot. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. By the way, when you&#39;ve finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this. Use this token to access the HTTP API: 123456789:abcdefghijklmnopqrstuvwxyz For a description of the Bot API, see this page: https://core.telegram.org/bots/api     API ,     123456789:abcdefghijklmnopqrstuvwxyz.     BotFather     .         . 1.2         R  ,       R,    RStudio.    ,         ,   .    Telegram Bot API    R  telegram.bot.    R   install.packages(),         install.packages(\"telegram.bot\").           .      : library(telegram.bot) 1.3    R  Telegram       Telegram     ,     @my_test_bot.    ,   .        ,    id    .   R   . library(telegram.bot) #    bot &lt;- Bot(token = &quot;123456789:abcdefghijklmnopqrstuvwxyz&quot;) #     print(bot$getMe()) #   , ..     updates &lt;- bot$getUpdates() #    # :         chat_id &lt;- updates[[1L]]$from_chat_id()        Bot(),          .        ,        ,     .     telegram.bot      : R_TELEGRAM_BOT___.  __       ,      R_TELEGRAM_BOT_My Test Bot.      ,       .      (      path.expand(\"~\"))     .Renviron.        file.edit(path.expand(file.path(\"~\", \".Renviron\"))).      . R_TELEGRAM_BOT___=123456789:abcdefghijklmnopqrstuvwxyz             bot_token(), ..  : bot &lt;- Bot(token = bot_token(&quot;My Test Bot&quot;))  getUpdates()    , ..     .  from_chat_id(),    ,     .         .  id      getUpdates()       . ,   ,  . updates[[1L]]$message$from $id [1] 000000000 $is_bot [1] FALSE $first_name [1] &quot;Alexey&quot; $last_name [1] &quot;Seleznev&quot; $username [1] &quot;AlexeySeleznev&quot; $language_code [1] &quot;ru&quot; ,        ,         .   sendMessage(),      ,  ,     .     Markdown  HTML    parse_mode. #   bot$sendMessage(chat_id, text = &quot;, * * __&quot;, parse_mode = &quot;Markdown&quot; )          ,   ,   chat_id    ,  '@MyTGChannel'.   Markdown :       *: : * * :      : : __ :   ,     ,    : : ` ` :     HTML :  HTML    ,   ,  ,  &lt;&gt;&lt;/&gt;. &lt;&gt; -   &lt;/&gt; -    HTML  &lt;b&gt; -   : &lt;b&gt; &lt;/b&gt;    &lt;i&gt; -  : &lt;i&gt;&lt;/i&gt; :  &lt;code&gt; -   : &lt;code\\&gt; &lt;/code\\&gt; :             : #   bot$sendPhoto(chat_id, photo = &quot;https://telegram.org/img/t_logo.png&quot; ) #    bot$sendAudio(chat_id, audio = &quot;http://www.largesound.com/ashborytour/sound/brobob.mp3&quot; ) #   bot$sendDocument(chat_id, document = &quot;https://github.com/ebeneditos/telegram.bot/raw/gh-pages/docs/telegram.bot.pdf&quot; ) #   bot$sendSticker(chat_id, sticker = &quot;https://www.gstatic.com/webp/gallery/1.webp&quot; ) #   bot$sendVideo(chat_id, video = &quot;http://techslides.com/demos/sample-videos/small.mp4&quot; ) #  gif  bot$sendAnimation(chat_id, animation = &quot;https://media.giphy.com/media/sIIhZliB2McAo/giphy.gif&quot; ) #   bot$sendLocation(chat_id, latitude = 51.521727, longitude = -0.117255 ) #     bot$sendChatAction(chat_id, action = &quot;typing&quot; ) ..     sendPhoto()        ,       ggplot2. 1.4    telegram        telegram      HTML  Markdown,      .        to_tg_table(): library(purrr) library(tidyr) library(stringr) #    data.frame  telegram  to_tg_table &lt;- function( table, align = NULL, indents = 3, parse_mode = &#39;Markdown&#39; ) { #          if ( is.null(align) ) { col_num &lt;- length(table) align &lt;- str_c( rep(&#39;l&#39;, col_num), collapse = &#39;&#39; ) } #      if ( length(table) != nchar(align) ) { align &lt;- NULL } #    side &lt;- sapply(1:nchar(align), function(x) { letter &lt;- substr(align, x, x) switch (letter, &#39;l&#39; = &#39;right&#39;, &#39;r&#39; = &#39;left&#39;, &#39;c&#39; = &#39;both&#39;, &#39;left&#39; ) }) #   t_names &lt;- names(table) #    names_length &lt;- sapply(t_names, nchar) value_length &lt;- sapply(table, function(x) max(nchar(as.character(x)))) max_length &lt;- ifelse(value_length &gt; names_length, value_length, names_length) #        +   indents -  t_names &lt;- mapply(str_pad, string = t_names, width = max_length + indents, side = side) #    str_names &lt;- str_c(t_names, collapse = &#39;&#39;) #    str_pad rules &lt;- list(string = table, width = max_length + indents, side = side) #        t_str &lt;- pmap_df( rules, str_pad )%&gt;% unite(&quot;data&quot;, everything(), remove = TRUE, sep = &#39;&#39;) %&gt;% unlist(data) %&gt;% str_c(collapse = &#39;\\n&#39;) #     4096    if ( nchar(t_str) &gt;= 4021 ) { warning(&#39;   4096 !&#39;) t_str &lt;- substr(t_str, 1, 4021) } #        code_block &lt;- switch(parse_mode, &#39;Markdown&#39; = c(&#39;```&#39;, &#39;```&#39;), &#39;HTML&#39; = c(&#39;&lt;code&gt;&#39;, &#39;&lt;/code&gt;&#39;)) #   code res &lt;- str_c(code_block[1], str_names, t_str, code_block[2], sep = &#39;\\n&#39;) return(res) }         data.frame    telegram: #   iris tg_table &lt;- to_tg_table( head(iris, 15) ) #    telegram bot$sendMessage(194336771, tg_table, &quot;Markdown&quot;)  telegram    :   to_tg_table()    : align -  ,  ,     ,  'llrrc': l -     r -     c -    indents -     . parse_mode -  , Markdown  HTML.    : #   iris tg_table &lt;- to_tg_table( head(iris, 15), align = &#39;llccr&#39;) #    telegram bot$sendMessage(194336771, tg_table, &quot;Markdown&quot;) 1.5     Emoji       ,              Emoji.         .        Unicode.     ,   U+  \\U000. ..     ,     U+1F601,     R          - \\U0001F601. : bot$sendMessage(chat_id, &#39;   \\U0001F601     U+1F601&#39;) : 1.6    Windows,     ,           Windows     taskscheduleR,         dplyr. #   install.packages(c(&#39;taskscheduleR&#39;, &#39;dplyr&#39;)) #   library(taskscheduleR) library(dplyr)     taskscheduler_ls()        .    filter()   dplyr      ,          0,  ,          267011,  ,       . #    task &lt;- task &lt;- taskscheduler_ls() %&gt;% filter(! `Last Result` %in% c(&quot;0&quot;, &quot;267011&quot;) &amp; `Scheduled Task State` == &quot;Enabled&quot; &amp; Status != &quot;Running&quot;) %&gt;% select(TaskName) %&gt;% unique() %&gt;% unlist() %&gt;% paste0(., collapse = &quot;\\n&quot;)   task     ,    ,       Telegram.     , : filter() -   ,     select() -          unique() -    unlist() -       paste0() -      ,        , .. \\n.     -     . bot$sendMessage(chat_id, text = task, parse_mode = &quot;Markdown&quot; ) ,        : #   library(telegram.bot) library(taskscheduleR) library(dplyr) #   bot &lt;- Bot(token = &quot;123456789:abcdefghijklmnopqrstuvwxyz&quot;) #   chat_id &lt;- 123456789 #    task &lt;- taskscheduler_ls() %&gt;% filter(! `Last Result` %in% c(&quot;0&quot;, &quot;267011&quot;) &amp; `Scheduled Task State` == &quot;Enabled&quot; &amp; Status != &quot;Running&quot;) %&gt;% select(TaskName) %&gt;% unique() %&gt;% unlist() %&gt;% paste0(., collapse = &quot;\\n&quot;) #       if ( task != &quot;&quot; ) { bot$sendMessage(chat_id, text = task, parse_mode = &quot;Markdown&quot; ) }               .      ,     ,    ,  .           ,     id   .        configr. [telegram_bot] ;    ,      chat_id=12345678 bot_token=123456789:abcdefghijklmnopqrstuvwxyz&quot; library(configr) #   config &lt;- read.config(&#39;C:/__/config.cfg&#39;, rcmd.parse = TRUE) bot_token &lt;- config$telegram_bot$bot_token chat_id &lt;- config$telegram_bot$chat_id 1.7                  .     ,     .  -     ,         . ,         check_bot.R.  ,          :     Path       R,  Windows    : C:\\Program Files\\R\\R-4.0.2\\bin.   bat ,       R CMD BATCH C:\\rscripts\\check_bot\\check_bot.R.  C:\\rscripts\\check_bot\\check_bot.R      R .       Windows  ,     . 1.8        ,   ,         telegram.       Windows,           ,         , .. R        .         ,       ,  ,       ,      . 1.9    1.9.1           . 1.9.2     BotFather .     ,       .       telegram  20     R   ToothGrowth.         : "],["-updater-2.html", " 2       ,  Updater (2) 2.1  Updater 2.2 Handlers -  2.3    ,   2.4      2.5     2.6      2.7      2.8        2.9  2.10   ", "  2       ,  Updater (2)              ,      Updater.        ,                     . ,           telegram.bot     . 2.1  Updater Updater -  ,      ,      Dispetcher.   Updater   ,       (         getUpdates()),      Dispetcher.    Dispetcher      , ..   Handler. 2.2 Handlers -        Dispetcher     .      telegram.bot    : MessageHandler -   CommandHandler -   CallbackQueryHandler -     Inline  ErrorHandler -        2.3    ,         ,    ,   ,          /   .     , ..       /hi. library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #     say_hello &lt;- function(bot, update) { #       user_name &lt;- update$message$from$first_name #    bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, user_name, &quot;!&quot;), parse_mode = &quot;Markdown&quot;) } #   hi_hendler &lt;- CommandHandler(&#39;hi&#39;, say_hello) #     updater &lt;- updater + hi_hendler #   updater$start_polling()     ,        ,        BotFather.  start_polling()  Updater,     ,         .   ,       /hi.      /hi,     .          .    Updater;  , ..      .      say_hello(). ,             - bot  update,    - args.  bot,     ,        ,  ,       .  update  ,     ,  ,         getUpdates().  args          ,        ;  , ..  -        .     ,    -  .         /hi,    hi_hendler &lt;- CommandHandler('hi', say_hello).    CommandHandler()    ,    hi,     .      ,     say_hello,           ;          Updater.     ,      ,    +, .. updater &lt;- updater + hi_hendler.         add_handler(),     Dispatcher,     : updater$dispatcher$add_handler();      start_polling(). 2.4           ,    ,        ,    - ,  .       - MessageHandler.  MessageHandler       .        .         /hi,   ,          : , , , , .      -  , ..            .          . library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #     ##   say_hello &lt;- function(bot, update) { #       user_name &lt;- update$message$from$first_name #    bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, user_name, &quot;!&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } #   MessageFilters$hi &lt;- BaseFilter(function(message) { # ,      : , , , ,  grepl(x = message$text, pattern = &#39;||||&#39;, ignore.case = TRUE) } ) #   hi_hendler &lt;- CommandHandler(&#39;hi&#39;, say_hello) #   hi hi_txt_hnd &lt;- MessageHandler(say_hello, filters = MessageFilters$hi) #     updater &lt;- updater + hi_hendler + hi_txt_hnd #   updater$start_polling()     ,        ,        BotFather.      ,        : ,         ,    .       reply_to_message_id,     sendMessage(),     id     .  id    : update$message$message_id.  ,    -       BaseFilter(): #   MessageFilters$hi &lt;- BaseFilter( #    function(message) { # ,        grepl(x = message$text, pattern = &#39;||||&#39;, ignore.case = TRUE) } )    ,      MessageFilters,         .      MessageFilters    hi,   .   BaseFilter()     .  ,  -   ,       TRUE  FALSE.   ,    ,      grepl()   ,       ||||  TRUE.      hi_txt_hnd &lt;- MessageHandler(say_hello, filters = MessageFilters$hi).    MessageHandler() - ,    ,    -       .        MessageFilters$hi.    ,      ,   hi_txt_hnd. updater &lt;- updater + hi_hendler + hi_txt_hnd     ,   telegram.bot   MessageFilters     ,    : all -   text -   command - , ..     / reply - ,       audio -       document -     photo -     sticker -     video -    voice -   contact -        location -    venue -   game -              | -    ,   &amp;    . ,                ,         : handler &lt;- MessageHandler(callback, MessageFilters$video | MessageFilters$photo | MessageFilters$document ) 2.5       ,   ,          .       ,        .   ,             .     API   isdayoff.ru. library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #     ##   check_date &lt;- function(bot, update, args) { #   day &lt;- args[1] #  country &lt;- args[2] #  #    if ( !grepl(&#39;\\\\d{4}-\\\\d{2}-\\\\d{2}&#39;, day) ) { # Send Custom Keyboard bot$sendMessage(update$message$chat_id, text = paste0(day, &quot; -  ,     --&quot;), parse_mode = &quot;Markdown&quot;) } else { day &lt;- as.Date(day) #    POSIXtl y &lt;- format(day, &quot;%Y&quot;) m &lt;- format(day, &quot;%m&quot;) d &lt;- format(day, &quot;%d&quot;) } #    ##     ##     ru if ( ! country %in% c(&#39;ru&#39;, &#39;ua&#39;, &#39;by&#39;, &#39;kz&#39;, &#39;us&#39;) ) { # Send Custom Keyboard bot$sendMessage(update$message$chat_id, text = paste0(country, &quot; -   ,  : ru, by, kz, ua, us.    .&quot;), parse_mode = &quot;Markdown&quot;) country &lt;- &#39;ru&#39; } #    API #  HTTP  url &lt;- paste0(&quot;https://isdayoff.ru/api/getdata?&quot;, &quot;year=&quot;, y, &quot;&amp;&quot;, &quot;month=&quot;, m, &quot;&amp;&quot;, &quot;day=&quot;, d, &quot;&amp;&quot;, &quot;cc=&quot;, country, &quot;&amp;&quot;, &quot;pre=1&amp;&quot;, &quot;covid=1&quot;) #   res &lt;- readLines(url) #   out &lt;- switch(res, &quot;0&quot; = &quot; &quot;, &quot;1&quot; = &quot; &quot;, &quot;2&quot; = &quot;  &quot;, &quot;4&quot; = &quot;covid-19&quot;, &quot;100&quot; = &quot;  &quot;, &quot;101&quot; = &quot;  &quot;, &quot;199&quot; = &quot; &quot;) #   bot$sendMessage(update$message$chat_id, text = paste0(day, &quot; - &quot;, out), parse_mode = &quot;Markdown&quot;) } #   date_hendler &lt;- CommandHandler(&#39;check_date&#39;, check_date, pass_args = TRUE) #     updater &lt;- updater + date_hendler #   updater$start_polling()     ,        ,        BotFather.   ,        check_date,     . ,   ,        ,    .   ,        ,       .           ,   pass_args = TRUE   CommandHandler(),    ,    bot, update   - args.       ,       .      ,        .  ,    . 2.6            -     .       :        R.    RStudio     File,  Save As.     bin,             R   Path,  .    ,    1 : R CMD BATCH C:\\Users\\Alsey\\Documents\\my_bot.R.  *C:_bot.R*      .   ,         , ..       .  ,      txt  bat.    Windows,     ,         %windir%\\system32\\taskschd.msc /s.      .        .        ,         .    ,  .       ,      bat ,   .  ,          .     ,         .      ,      ,     ,           . 2.7       ,         ,      BotFather.       .   : /mybots -&gt; @bot_username -&gt; Bot Settings -&gt; Allow Groups?.        :           .     ,       ,      ,      ,           . 2.8             ,       . ,  ,             .     :    BotFather -&gt; @bot_username -&gt; Edit Bot -&gt; Edit Commands.          : command1 - Description command2 - Another description 2.9          ,      ,        .         .       ,    ,    .    telegram  youtube . 2.10    2.10.1           . 2.10.2   ,     /sum            ,   .         : "],["-3.html", " 3      (3) 3.1       3.2 Reply  3.3 Inline  3.4  3.5   ", "  3      (3)            ,      ,    . 3.1           telegram.bot      : Reply - ,  ,       .       ,       ,     . Inline -      .     ,    ,      ,    .      CallbackQueryHandler.  ,            sendMessage(),       reply_markup.     . 3.2 Reply      ,     . bot &lt;- Bot(token = &quot;TOKEN&quot;) chat_id &lt;- &quot;CHAT_ID&quot; # Create Custom Keyboard text &lt;- &quot;Aren&#39;t those custom keyboards cool?&quot; RKM &lt;- ReplyKeyboardMarkup( keyboard = list( list(KeyboardButton(&quot;Yes, they certainly are!&quot;)), list(KeyboardButton(&quot;I&#39;m not quite sure&quot;)), list(KeyboardButton(&quot;No...&quot;)) ), resize_keyboard = FALSE, one_time_keyboard = TRUE ) # Send Custom Keyboard bot$sendMessage(chat_id, text, reply_markup = RKM)        telegram.bot.      ReplyKeyboardMarkup(),        ,    KeyboardButton().   ReplyKeyboardMarkup()     ,   ?   ,     ,          , ..       .  resize_keyboard       ,   one_time_keyboard        .    ,    3 : *  ID -   ID    *   -    *   -       library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #   ##     start &lt;- function(bot, update) { #   RKM &lt;- ReplyKeyboardMarkup( keyboard = list( list(KeyboardButton(&quot; ID&quot;)), list(KeyboardButton(&quot; &quot;)), list(KeyboardButton(&quot; &quot;)) ), resize_keyboard = FALSE, one_time_keyboard = TRUE ) #   bot$sendMessage(update$message$chat_id, text = &#39; &#39;, reply_markup = RKM) } ##   id  chat_id &lt;- function(bot, update) { bot$sendMessage(update$message$chat_id, text = paste0(&quot; id  : &quot;, update$message$chat_id), parse_mode = &quot;Markdown&quot;) } ##    my_name &lt;- function(bot, update) { bot$sendMessage(update$message$chat_id, text = paste0(&quot;  &quot;, update$message$from$first_name), parse_mode = &quot;Markdown&quot;) } ##    my_username &lt;- function(bot, update) { bot$sendMessage(update$message$chat_id, text = paste0(&quot;  &quot;, update$message$from$username), parse_mode = &quot;Markdown&quot;) } #   ##     ID MessageFilters$chat_id &lt;- BaseFilter(function(message) { #    message$text == &quot; ID&quot; } ) ##      MessageFilters$name &lt;- BaseFilter(function(message) { #    message$text == &quot; &quot; } ) ##      MessageFilters$username &lt;- BaseFilter(function(message) { #    message$text == &quot; &quot; ) #   h_start &lt;- CommandHandler(&#39;start&#39;, start) h_chat_id &lt;- MessageHandler(chat_id, filters = MessageFilters$chat_id) h_name &lt;- MessageHandler(my_name, filters = MessageFilters$name) h_username &lt;- MessageHandler(my_username, filters = MessageFilters$username) #     updater &lt;- updater + h_start + h_chat_id + h_name + h_username #   updater$start_polling()     ,        ,        BotFather.      /start, ..       .          ,   ,   ,      ,       .   4 : start -   chat_id -    my_name -    my_username -      MessageFilters  3  ,   : chat_id -    \" ID\" name -    \" \" username -    \" \"   4 ,          . #   h_start &lt;- CommandHandler(&#39;start&#39;, start) h_chat_id &lt;- MessageHandler(chat_id, filters = MessageFilters$chat_id) h_name &lt;- MessageHandler(my_name, filters = MessageFilters$name) h_username &lt;- MessageHandler(my_username, filters = MessageFilters$username)      start()  ReplyKeyboardMarkup(). RKM &lt;- ReplyKeyboardMarkup( keyboard = list( list(KeyboardButton(&quot; ID&quot;)), list(KeyboardButton(&quot; &quot;)), list(KeyboardButton(&quot; &quot;)) ), resize_keyboard = FALSE, one_time_keyboard = TRUE )          ,        ,      . ..         ,   ,                 : RKM &lt;- ReplyKeyboardMarkup( keyboard = list( list( KeyboardButton(&quot; ID&quot;), KeyboardButton(&quot; &quot;), KeyboardButton(&quot; &quot;) ) ), resize_keyboard = FALSE, one_time_keyboard = TRUE )      sendMessage(),   reply_markup. bot$sendMessage(update$message$chat_id, text = &#39; &#39;, reply_markup = RKM) 3.3 Inline      , Inline     .         .      ,   Inline .     Inline       answerCallbackQuery(),       telegram,   Inline .    Inline    ,            CallbackQueryHandler().   Inline        telegram.bot. # Initialize bot bot &lt;- Bot(token = &quot;TOKEN&quot;) chat_id &lt;- &quot;CHAT_ID&quot; # Create Inline Keyboard text &lt;- &quot;Could you type their phone number, please?&quot; IKM &lt;- InlineKeyboardMarkup( inline_keyboard = list( list( InlineKeyboardButton(1), InlineKeyboardButton(2), InlineKeyboardButton(3) ), list( InlineKeyboardButton(4), InlineKeyboardButton(5), InlineKeyboardButton(6) ), list( InlineKeyboardButton(7), InlineKeyboardButton(8), InlineKeyboardButton(9) ), list( InlineKeyboardButton(&quot;*&quot;), InlineKeyboardButton(0), InlineKeyboardButton(&quot;#&quot;) ) ) ) # Send Inline Keyboard bot$sendMessage(chat_id, text, reply_markup = IKM)  Inline      InlineKeyboardMarkup(),    ,   Reply .  InlineKeyboardMarkup()   ,  Inline ,      InlineKeyboardButton(). Inline      -     callback_data,   - HTML ,     url.    ,         Inline ,      .        Inline . 3.3.1      InLine           covid-19.   /test,        ,              . library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #    InLine  test &lt;- function(bot, update) { #  InLine  IKM &lt;- InlineKeyboardMarkup( inline_keyboard = list( list( InlineKeyboardButton(&quot;&quot;, callback_data = &#39;yes&#39;), InlineKeyboardButton(&quot;&quot;, callback_data = &#39;no&#39;) ) ) ) #     bot$sendMessage(update$message$chat_id, text = &quot;  ?&quot;, reply_markup = IKM) } #      answer_cb &lt;- function(bot, update) { #     data &lt;- update$callback_query$data #   ,   uname &lt;- update$effective_user()$first_name #   if ( data == &#39;no&#39; ) { msg &lt;- paste0(uname, &quot;, ,    covid-19 .&quot;) } else { msg &lt;- paste0(uname, &quot;,      covid-19 .&quot;) } #   bot$sendMessage(chat_id = update$from_chat_id(), text = msg) #  ,      bot$answerCallbackQuery(callback_query_id = update$callback_query$id) } #   inline_h &lt;- CommandHandler(&#39;test&#39;, test) query_handler &lt;- CallbackQueryHandler(answer_cb) #     updater &lt;- updater + inline_h + query_handler #   updater$start_polling()     ,        ,        BotFather. :    : test -     Inline  answer_cb -      . ,          callback_data,   .          update$callback_query$data,   answer_cb.      Inline ,  answer_cb   : CallbackQueryHandler(answer_cb).       Inline .  CallbackQueryHandler   : callback -     pattern -   ,        callback_data.     pattern         : library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #    InLine  test &lt;- function(bot, update) { #  InLine  IKM &lt;- InlineKeyboardMarkup( inline_keyboard = list( list( InlineKeyboardButton(&quot;&quot;, callback_data = &#39;yes&#39;), InlineKeyboardButton(&quot;&quot;, callback_data = &#39;no&#39;) ) ) ) #     bot$sendMessage(update$message$chat_id, text = &quot;  ?&quot;, reply_markup = IKM) } #       answer_cb_yes &lt;- function(bot, update) { #   ,   uname &lt;- update$effective_user()$first_name #   msg &lt;- paste0(uname, &quot;,      covid-19 .&quot;) #   bot$sendMessage(chat_id = update$from_chat_id(), text = msg) #  ,      bot$answerCallbackQuery(callback_query_id = update$callback_query$id) } #       answer_cb_no &lt;- function(bot, update) { #   ,   uname &lt;- update$effective_user()$first_name msg &lt;- paste0(uname, &quot;, ,    covid-19 .&quot;) #   bot$sendMessage(chat_id = update$from_chat_id(), text = msg) #  ,      bot$answerCallbackQuery(callback_query_id = update$callback_query$id) } #   inline_h &lt;- CommandHandler(&#39;test&#39;, test) query_handler_yes &lt;- CallbackQueryHandler(answer_cb_yes, pattern = &#39;yes&#39;) query_handler_no &lt;- CallbackQueryHandler(answer_cb_no, pattern = &#39;no&#39;) #     updater &lt;- updater + inline_h + query_handler_yes + query_handler_no #   updater$start_polling()     ,        ,        BotFather.    2  , ..   ,    ,    pattern,    : query_handler_yes &lt;- CallbackQueryHandler(answer_cb_yes, pattern = &#39;yes&#39;) query_handler_no &lt;- CallbackQueryHandler(answer_cb_no, pattern = &#39;no&#39;)    answer_cb  bot$answerCallbackQuery(callback_query_id = update$callback_query$id),   ,    inline  . 3.3.2  ,           ,     .     .   /start    ,       .         Inline ,   ,      .    ,    .          : httr -     HTTP ,        API.        API openweathermap.org. stringr -     ,               .  ,        library(telegram.bot) library(httr) library(stringr) #    Updater updater &lt;- Updater(&#39;  &#39;) #   ##      start &lt;- function(bot, update) { #   RKM &lt;- ReplyKeyboardMarkup( keyboard = list( list( KeyboardButton(&quot;&quot;) ) ), resize_keyboard = TRUE, one_time_keyboard = TRUE ) #   bot$sendMessage(update$message$chat_id, text = &#39; &#39;, reply_markup = RKM) } ##   Inine  weather &lt;- function(bot, update) { IKM &lt;- InlineKeyboardMarkup( inline_keyboard = list( list( InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;New York,us&#39;), InlineKeyboardButton(text = &#39;-&#39;, callback_data = &#39;Saint Petersburg&#39;), InlineKeyboardButton(text = &#39;-&#39;, callback_data = &#39;New York&#39;) ), list( InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Yekaterinburg,ru&#39;), InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Berlin,de&#39;), InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Paris,fr&#39;) ), list( InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Rome,it&#39;), InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Odessa,ua&#39;), InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Kyiv,fr&#39;) ), list( InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Tokyo&#39;), InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Amsterdam,nl&#39;), InlineKeyboardButton(text = &#39;&#39;, callback_data = &#39;Washington,us&#39;) ) ) ) # Send Inline Keyboard bot$sendMessage(chat_id = update$message$chat_id, text = &quot; &quot;, reply_markup = IKM) } #     answer_cb &lt;- function(bot, update) { #     city &lt;- update$callback_query$data #   ans &lt;- GET(&#39;https://api.openweathermap.org/data/2.5/weather&#39;, query = list(q = city, lang = &#39;ru&#39;, units = &#39;metric&#39;, appid = &#39;4776568ccea136ffe4cda9f1969af340&#39;)) #   result &lt;- content(ans) #   msg &lt;- str_glue(&quot;{result$name} :\\n&quot;, &quot; : {result$main$temp}\\n&quot;, &quot; : {result$wind$speed}\\n&quot;, &quot;: {result$weather[[1]]$description}&quot;) #     bot$sendMessage(chat_id = update$from_chat_id(), text = msg) bot$answerCallbackQuery(callback_query_id = update$callback_query$id) } #   ##     MessageFilters$weather &lt;- BaseFilter(function(message) { #    message$text == &quot;&quot; } ) #   h_start &lt;- CommandHandler(&#39;start&#39;, start) h_weather &lt;- MessageHandler(weather, filters = MessageFilters$weather) h_query_handler &lt;- CallbackQueryHandler(answer_cb) #     updater &lt;- updater + h_start + h_weather + h_query_handler #   updater$start_polling()     ,        ,        BotFather.        :       :   3 ,     : start -     weather -  Inline     answer_cb -  ,       API ,     .  start     /start,    CommandHandler('start', start).    weather    : #   ##     MessageFilters$weather &lt;- BaseFilter(function(message) { #    message$text == &quot;&quot; } )       : MessageHandler(weather, filters = MessageFilters$weather).    ,    answer_cb    Inline ,    : CallbackQueryHandler(answer_cb).   answer_cb,            city: city &lt;- update$callback_query$data.     API   ,    ,       answerCallbackQuery  ,    ,  ,     Inline . 3.3.3  ,         -   habr.com.      ,    ,   Inline      .      ,       /start.         6 ,     ,   5      .   ,        ,         habR,             R.   habR    github,       devtools.      . install.packages(&#39;devtools&#39;) devtools::install_github(&#39;selesnow/habR&#39;)       :            library(telegram.bot) library(habR) #    Updater updater &lt;- Updater(&#39;  &#39;) #   ##      start &lt;- function(bot, update) { #   RKM &lt;- ReplyKeyboardMarkup( keyboard = list( list( KeyboardButton(&quot; &quot;) ) ), resize_keyboard = TRUE, one_time_keyboard = TRUE ) #   bot$sendMessage(update$message$chat_id, text = &#39; &#39;, reply_markup = RKM) } ##   Inine  habs &lt;- function(bot, update) { IKM &lt;- InlineKeyboardMarkup( inline_keyboard = list( list( InlineKeyboardButton(text = &#39;R&#39;, callback_data = &#39;R&#39;), InlineKeyboardButton(text = &#39;Data Mining&#39;, callback_data = &#39;data_mining&#39;), InlineKeyboardButton(text = &#39;Data Engineering&#39;, callback_data = &#39;data_engineering&#39;) ), list( InlineKeyboardButton(text = &#39;Big Data&#39;, callback_data = &#39;bigdata&#39;), InlineKeyboardButton(text = &#39;Python&#39;, callback_data = &#39;python&#39;), InlineKeyboardButton(text = &#39; &#39;, callback_data = &#39;data_visualization&#39;) ) ) ) # Send Inline Keyboard bot$sendMessage(chat_id = update$message$chat_id, text = &quot; &quot;, reply_markup = IKM) } #     answer_cb &lt;- function(bot, update) { #     hub &lt;- update$callback_query$data #   ,      bot$answerCallbackQuery(callback_query_id = update$callback_query$id, text = &#39;  ,  &#39;) #   ,        mid &lt;- bot$sendMessage(chat_id = update$from_chat_id(), text = &quot;   ,      &quot;) #   posts &lt;- head(habr_hub_posts(hub, 1), 5) #    ,    bot$deleteMessage(update$from_chat_id(), mid$message_id) #    keys &lt;- lapply(1:5, function(x) list(InlineKeyboardButton(posts$title[x], url = posts$link[x]))) #   IKM &lt;- InlineKeyboardMarkup( inline_keyboard = keys ) #     bot$sendMessage(chat_id = update$from_chat_id(), text = paste0(&quot;5      &quot;, hub), reply_markup = IKM) } #   ##     MessageFilters$hubs &lt;- BaseFilter(function(message) { #    message$text == &quot; &quot; } ) #   h_start &lt;- CommandHandler(&#39;start&#39;, start) h_hubs &lt;- MessageHandler(habs, filters = MessageFilters$hubs) h_query_handler &lt;- CallbackQueryHandler(answer_cb) #     updater &lt;- updater + h_start + h_hubs + h_query_handler #   updater$start_polling()     ,        ,        BotFather.       :        ,   habs: ##   Inine  habs &lt;- function(bot, update) { IKM &lt;- InlineKeyboardMarkup( inline_keyboard = list( list( InlineKeyboardButton(text = &#39;R&#39;, callback_data = &#39;r&#39;), InlineKeyboardButton(text = &#39;Data Mining&#39;, callback_data = &#39;data_mining&#39;), InlineKeyboardButton(text = &#39;Data Engineering&#39;, callback_data = &#39;data_engineering&#39;) ), list( InlineKeyboardButton(text = &#39;Big Data&#39;, callback_data = &#39;bigdata&#39;), InlineKeyboardButton(text = &#39;Python&#39;, callback_data = &#39;python&#39;), InlineKeyboardButton(text = &#39; &#39;, callback_data = &#39;data_visualization&#39;) ) ) ) # Send Inline Keyboard bot$sendMessage(chat_id = update$message$chat_id, text = &quot; &quot;, reply_markup = IKM) }         habr_hub_posts(),   habR.   ,         ,        20 .       head()   5  ,      . #   posts &lt;- head(habr_hub_posts(hub, 1), 5)      ,     Inline           lapply(). #    keys &lt;- lapply(1:5, function(x) list(InlineKeyboardButton(posts$title[x], url = posts$link[x]))) #   IKM &lt;- InlineKeyboardMarkup( inline_keyboard = keys )        posts$title[x],    url   : url = posts$link[x]. ,  ,     . 3.4          ,   ,       ,    .              .           ,     . 3.5    3.5.1           . 3.5.2   ,    Reply .  Reply      .       Inline     6  . Africa/Cairo America/Chicago Europe/Moscow Asia/Bangkok Europe/Kiev Australia/Sydney  Inline     2  ,    .       Inline          API worldtimeapi.org.    API: http://worldtimeapi.org/api/timezone/{area}/:{location}.  {area}  ,  Europe,  {location}  ,  Kiev.          datetime.        : "],["-4.html", " 4  ,     (4) 4.1  4.2    4.3    4.4   4.5    4.6    4.7        4.8   4.9   4.10  4.11    4.12  4.13   ", "  4  ,     (4)         ,     . ..     ,      - .           .            ,      SQLite,       .          R      . 4.1   ,        ,    -       .    ,      ,  SQLite. ..   .    ,       - ,          ,     .     ,      ,  ,       .     ,      ,   .        : 1. start -   ,          2. wait_name - ,       3. wait_age - ,       ,   . 4.2              ,       :   ,      .     ,      .   ,         .    ,     ,       .   , ..     .   .         ,      .  ,         .  . 4.3          ,         . bot.R -     db_bot_function.R -          bot_methods.R -    message_filters.R -   handlers.R -  config.cfg -   create_db_data.sql - SQL          create_db_state.sql - SQL          bot.db -        ,       GitHub. 4.4          ini ,  : [bot_settings] bot_token=__ [db_settings] db_path=C://///bot.db      ,     , ..   bot.db,        .          ,       ini ,       JSON. 4.5               ,    ,             TG_BOT_PATH.      ,   -     .Renviron. ,         file.edit(path.expand(file.path(\"~\", \".Renviron\"))).        : TG_BOT_PATH=C:////    .Renviron   RStudio. 4.6      -   .   2 : chat_data -       chat_state -            SQL : CREATE TABLE chat_data ( chat_id BIGINT PRIMARY KEY UNIQUE, name TEXT, age INTEGER ); CREATE TABLE chat_state ( chat_id BIGINT PRIMARY KEY UNIQUE, state TEXT );       GitHub,           R. #     library(DBI) #      library(configr) #   library(readr) #   SQL  library(RSQLite) #     SQLite #   setwd(Sys.getenv(&#39;TG_BOT_PATH&#39;)) #   cfg &lt;- read.config(&#39;config.cfg&#39;) #   SQLite con &lt;- dbConnect(SQLite(), cfg$db_settings$db_path) #     dbExecute(con, statement = read_file(&#39;create_db_data.sql&#39;)) dbExecute(con, statement = read_file(&#39;create_db_state.sql&#39;)) 4.7                 .            .      GitHub,        db_bot_function.R. # ########################################################### # Function for work bot with database #     get_state &lt;- function(chat_id) { con &lt;- dbConnect(SQLite(), cfg$db_settings$db_path) chat_state &lt;- dbGetQuery(con, str_interp(&quot;SELECT state FROM chat_state WHERE chat_id == ${chat_id}&quot;))$state return(unlist(chat_state)) dbDisconnect(con) } #     set_state &lt;- function(chat_id, state) { con &lt;- dbConnect(SQLite(), cfg$db_settings$db_path) # upsert   dbExecute(con, str_interp(&quot; INSERT INTO chat_state (chat_id, state) VALUES(${chat_id}, &#39;${state}&#39;) ON CONFLICT(chat_id) DO UPDATE SET state=&#39;${state}&#39;; &quot;) ) dbDisconnect(con) } #      set_chat_data &lt;- function(chat_id, field, value) { con &lt;- dbConnect(SQLite(), cfg$db_settings$db_path) # upsert   dbExecute(con, str_interp(&quot; INSERT INTO chat_data (chat_id, ${field}) VALUES(${chat_id}, &#39;${value}&#39;) ON CONFLICT(chat_id) DO UPDATE SET ${field}=&#39;${value}&#39;; &quot;) ) dbDisconnect(con) } # read chat data get_chat_data &lt;- function(chat_id, field) { con &lt;- dbConnect(SQLite(), cfg$db_settings$db_path) # upsert   data &lt;- dbGetQuery(con, str_interp(&quot; SELECT ${field} FROM chat_data WHERE chat_id = ${chat_id}; &quot;) ) dbDisconnect(con) return(data[[field]]) }   4  : * get_state() -       * set_state() -       * get_chat_data() -     * set_chat_data() -         ,          dbGetQuery(),   UPSERT  (        ),    dbExecute().  UPSERT    : INSERT INTO chat_data (chat_id, ${field}) VALUES(${chat_id}, &#39;${value}&#39;) ON CONFLICT(chat_id) DO UPDATE SET ${field}=&#39;${value}&#39;; ..     chat_id         .       ,          ,          .           . 4.8           .      GitHub,       bot_methods.R. # ########################################################### # bot methods # start dialog start &lt;- function(bot, update) { # # Send query bot$sendMessage(update$message$chat_id, text = &quot;  &quot;) #         set_state(chat_id = update$message$chat_id, state = &#39;wait_name&#39;) } # get current chat state state &lt;- function(bot, update) { chat_state &lt;- get_state(update$message$chat_id) # Send state bot$sendMessage(update$message$chat_id, text = unlist(chat_state)) } # reset dialog state reset &lt;- function(bot, update) { set_state(chat_id = update$message$chat_id, state = &#39;start&#39;) } # enter username enter_name &lt;- function(bot, update) { uname &lt;- update$message$text # Send message with name bot$sendMessage(update$message$chat_id, text = paste0(uname, &quot;,  ,  !&quot;)) #      #username &lt;&lt;- uname set_chat_data(update$message$chat_id, &#39;name&#39;, uname) #   bot$sendMessage(update$message$chat_id, text = &quot;  ?&quot;) #       set_state(chat_id = update$message$chat_id, state = &#39;wait_age&#39;) } # enter user age enter_age &lt;- function(bot, update) { uage &lt;- as.numeric(update$message$text) #       if ( is.na(uage) ) { #        bot$sendMessage(update$message$chat_id, text = &quot;   ,  &quot;) } else { #        bot$sendMessage(update$message$chat_id, text = &quot;,  &quot;) #      #userage &lt;&lt;- uage set_chat_data(update$message$chat_id, &#39;age&#39;, uage) #      username &lt;- get_chat_data(update$message$chat_id, &#39;name&#39;) userage &lt;- get_chat_data(update$message$chat_id, &#39;age&#39;) bot$sendMessage(update$message$chat_id, text = paste0(&quot;  &quot;, username, &quot;   &quot;, userage, &quot; .  &quot;)) #      set_state(chat_id = update$message$chat_id, state = &#39;start&#39;) } }   5 : start -   state -     reset -     enter_name -     enter_age -      start   ,      wait_name, ..      . ,        enter_name,    ,     ,      wait_age.          .    ,   ,      -   :    ,  ,        .      ,    ,     ,     ,             , ..  start.   state         ,   reset     . 4.9              .              ,     .    GitHub     message_filters.R.   : # ########################################################### # message state filters #       MessageFilters$wait_name &lt;- BaseFilter(function(message) { get_state( message$chat_id ) == &quot;wait_name&quot; } ) #       MessageFilters$wait_age &lt;- BaseFilter(function(message) { get_state( message$chat_id ) == &quot;wait_age&quot; } )        get_state(),  ,      .     1 , id .   wait_name        wait_name,    wait_age        wait_age. 4.10      handlers.R,    : # ########################################################### # handlers # command handlers start_h &lt;- CommandHandler(&#39;start&#39;, start) state_h &lt;- CommandHandler(&#39;state&#39;, state) reset_h &lt;- CommandHandler(&#39;reset&#39;, reset) # message handlers ## !MessageFilters$command -       , ##    wait_age_h &lt;- MessageHandler(enter_age, MessageFilters$wait_age &amp; !MessageFilters$command) wait_name_h &lt;- MessageHandler(enter_name, MessageFilters$wait_name &amp; !MessageFilters$command)     ,        ,  ,    .    2         ,      !MessageFilters$command,  ,          . 4.11          ,        bot.R. library(telegram.bot) library(tidyverse) library(RSQLite) library(DBI) library(configr) #     setwd(Sys.getenv(&#39;TG_BOT_PATH&#39;)) #   cfg &lt;- read.config(&#39;config.cfg&#39;) #    updater &lt;- Updater(cfg$bot_settings$bot_token) #    source(&#39;db_bot_function.R&#39;) #      source(&#39;bot_methods.R&#39;) #   source(&#39;message_filters.R&#39;) #   source(&#39;handlers.R&#39;) #   #     updater &lt;- updater + start_h + wait_age_h + wait_name_h + state_h + reset_h #   updater$start_polling()  ,      :       /state      ,     /reset         . 4.12            ,           .        ,  ,          ,         .                 . 4.13    4.13.1           . 4.13.2         . ..   /start      1  50.     5    .         ,      ,         ,      .           ,      .     ,    :   5 :  "],["-5.html", " 5     (5) 5.1  5.2        5.3       5.4  5.5   ", "  5     (5)       ,          . 5.1        ,      ,      . ..      .  ,        . ,        ,      .        ,      .    ,       2 : say_hello -   what_time - ,         library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #     ##   say_hello &lt;- function(bot, update) { #       user_name &lt;- update$message$from$first_name #   bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, user_name, &quot;!&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } ##          what_time &lt;- function(bot, update) { #    cur_time &lt;- as.character(Sys.time()) #   bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, cur_time), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } #  h_hello &lt;- CommandHandler(&#39;say_hello&#39;, say_hello) h_time &lt;- CommandHandler(&#39;what_time&#39;, what_time) #     updater &lt;- updater + h_hello + h_time #   updater$start_polling()     ,        ,        BotFather (       ).       ,   ,         . 5.2               ,    .        , ,    -     ,           .              ,   . 5.2.1                BaseFilter()      MessageFilters.            .   ,     BaseFilter()     - message.    ,     ,    .     : $message_id [1] 1174 $from $from$id [1] 194336771 $from$is_bot [1] FALSE $from$first_name [1] &quot;Alexey&quot; $from$last_name [1] &quot;Seleznev&quot; $from$username [1] &quot;AlexeySeleznev&quot; $from$language_code [1] &quot;ru&quot; $chat $chat$id [1] 194336771 $chat$first_name [1] &quot;Alexey&quot; $chat$last_name [1] &quot;Seleznev&quot; $chat$username [1] &quot;AlexeySeleznev&quot; $chat$type [1] &quot;private&quot; $date [1] 1601295189 $text [1] &quot;  &quot; $chat_id [1] 194336771 $from_user [1] 194336771             : User -       Telegram. Chat -     . Message -     .       ,     ,    , ..    message.  ,              : ##  ,    MessageFilters$admins &lt;- BaseFilter( function(message) { #      message$from$username %in% c(&#39;AlexeySeleznev&#39;, &#39;user1&#39;, &#39;user2&#39;) } )  c('AlexeySeleznev', 'user1', 'user2') - ,   ,      .        . ##     say_hello MessageFilters$say_hello &lt;- BaseFilter( function(message) { #      message$text == &#39;/say_hallo&#39; } ) ##     what_time MessageFilters$what_time &lt;- BaseFilter( function(message) { #      message$text == &#39;/what_time&#39; } ) #  h_hello &lt;- MessageHandler(say_hello, MessageFilters$admins &amp; MessageFilters$say_hello) h_time &lt;- MessageHandler(what_time, MessageFilters$admins &amp; MessageFilters$what_time)         AlexeySeleznev, user1, user2.           .          : library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #     ##   say_hello &lt;- function(bot, update) { #       user_name &lt;- update$message$from$first_name #   bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, user_name, &quot;!&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } ##          what_time &lt;- function(bot, update) { #    cur_time &lt;- as.character(Sys.time()) #   bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, cur_time), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } #  ##  ,    MessageFilters$admins &lt;- BaseFilter( function(message) { #      message$from$username %in% c(&#39;AlexeySeleznev&#39;, &#39;user1&#39;, &#39;user2&#39;) } ) ##     say_hello MessageFilters$say_hello &lt;- BaseFilter( function(message) { #      message$text == &#39;/say_hallo&#39; } ) ##     what_time MessageFilters$what_time &lt;- BaseFilter( function(message) { #      message$text == &#39;/what_time&#39; } ) #  h_hello &lt;- MessageHandler(say_hello, MessageFilters$admins &amp; MessageFilters$say_hello) h_time &lt;- MessageHandler(what_time, MessageFilters$admins &amp; MessageFilters$what_time) #     updater &lt;- updater + h_hello + h_time #   updater$start_polling() 5.2.2                 ,     .       : ##        MessageFilters$chats &lt;- BaseFilter( function(message) { #      message$chat_id %in% c(194336771, 0, 1) } ) ##     say_hello MessageFilters$say_hello &lt;- BaseFilter( function(message) { #      message$text == &#39;/say_hallo&#39; } ) ##     what_time MessageFilters$what_time &lt;- BaseFilter( function(message) { #      message$text == &#39;/what_time&#39; } ) #  h_hello &lt;- MessageHandler(say_hello, MessageFilters$admins &amp; MessageFilters$chats &amp; MessageFilters$say_hello) h_time &lt;- MessageHandler(what_time, MessageFilters$admins &amp; MessageFilters$chats &amp; MessageFilters$what_time) 5.3                   ,       . 5.3.1         ,        . #      bot_check_usernames &lt;- function(admins, username) { username %in% admins }   admins      ,     ,    username  ,     .    ,        IF  ,       .               . ,  ,      ,     what_time. library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #     ##   say_hello &lt;- function(bot, update) { #       user_name &lt;- update$message$from$username #         if ( bot_check_usernames(c(&#39;AlexeySeleznev&#39;, &#39;user1&#39;, &#39;user2&#39;), user_name) ) { #   bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, user_name, &quot;!&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } else { #   bot$sendMessage(update$message$chat_id, text = paste0(&quot;       !&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } } ##          what_time &lt;- function(bot, update) { #         if ( bot_check_usernames(c(&#39;user1&#39;, &#39;user2&#39;), update$message$from$username) ) { #    cur_time &lt;- as.character(Sys.time()) #           bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, cur_time), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } else { #           bot$sendMessage(update$message$chat_id, text = paste0(&quot;       !&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } } #  h_hello &lt;- CommandHandler(&#39;say_hello&#39;, say_hello) h_time &lt;- CommandHandler(&#39;what_time&#39;, what_time) #     updater &lt;- updater + h_hello + h_time #   updater$start_polling()   :         ,   ,         . 5.3.2                ,  ,          ,     .  ,          . bot_check_chat_id &lt;- function(allowed_chats, current_chat) { current_chat %in% allowed_chats }       : library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #     ##   say_hello &lt;- function(bot, update) { #       user_name &lt;- update$message$from$username #         if ( bot_check_usernames(c(&#39;AlexeySeleznev&#39;, &#39;user1&#39;, &#39;user2&#39;), user_name) &amp; bot_check_chat_id(c(194336771, 1, 2), update$message$chat_id)) { #   bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, user_name, &quot;!&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } else { #   bot$sendMessage(update$message$chat_id, text = paste0(&quot;       !&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } } ##          what_time &lt;- function(bot, update) { #         if ( bot_check_usernames(c(&#39;AlexeySeleznev&#39;, &#39;user1&#39;, &#39;user2&#39;), update$message$from$username) &amp; bot_check_chat_id(c(194336771, 1, 2), update$message$chat_id)) { #    cur_time &lt;- as.character(Sys.time()) #           bot$sendMessage(update$message$chat_id, text = paste0(&quot; , &quot;, cur_time), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } else { #           bot$sendMessage(update$message$chat_id, text = paste0(&quot;       !&quot;), parse_mode = &quot;Markdown&quot;, reply_to_message_id = update$message$message_id) } } #  h_hello &lt;- CommandHandler(&#39;say_hello&#39;, say_hello) h_time &lt;- CommandHandler(&#39;what_time&#39;, what_time) #     updater &lt;- updater + h_hello + h_time #   updater$start_polling() 5.4        telegram  .        ,   ,     ,      .    ,    .    .       ,       . 5.5    5.5.1           . 5.5.2      ,     ,    , ,         . "],["-6.html", " 6     (6) 6.1  tryCatch() 6.2    tryCatch() 6.3  tryCatch()  ", "  6     (6)         ,         .      ,      API Telegram   .       ,     ,    .       ,           . 6.1  tryCatch()       tryCatch().     : tryCatch(expr = { ~      ~ }, error = function(err) { ~           expr ~ }, finally = { ~       ,       expr    ~ }) 6.2    tryCatch()    ,           expr.        ,    ,    ,    .      expr  ,   tryCath()   ,      error.   ,    ,    expr   ,      ,    finally.         tryCatch()    . 6.3  tryCatch()         tryCatch()     .       .       , ..  updater$start_polling().  -   ,       ,        ,  API Telegram    .      tryCatch(),         finally        .        ,     ,    .      : tryCatch( #   expr = updater$start_polling(), #     error = function(err) { #    bot &lt;- Bot(token = bot_token(&quot;  &quot;)) #    chat_id &lt;- &quot;      &quot; #  msg &lt;- str_glue(&quot;* *:  (_{err$message}_).&quot;) bot$sendMessage(chat_id = chat_id, text = msg, parse_mode = &#39;Markdown&#39;) #    ,    updater$bot$clean_updates() #   ,     bot$sendMessage(chat_id = chat_id, text = str_glue(&#39;* *  {Sys.time()}&#39;), parse_mode = &#39;Markdown&#39;) }, #        finally = { #   updater$stop_polling() #    source(&#39;C:\\\\telegram_bot\\\\my_bot.R&#39;) } )           ,   ID ,         .   expr    ,       tryCatch.    error    ,      err, ..  .       err$message,     .   updater$bot$clean_updates()     , ..        .   finally   ,   source('C:\\\\telegram_bot\\\\my_bot.R')     .           .       updater$bot$clean_updates()       ,    ,    . "],["-tasks.html", "  (tasks)  1.1  2.1  3.1  4.1  5.1", "   (tasks)       ,    .  1.1    BotFather .     ,       .       telegram  20     R   ToothGrowth. : library(purrr) library(tidyr) library(stringr) library(telegram.bot) #    data.frame  telegram  to_tg_table &lt;- function( table, align = NULL, indents = 3, parse_mode = &#39;Markdown&#39; ) { #          if ( is.null(align) ) { col_num &lt;- length(table) align &lt;- str_c( rep(&#39;l&#39;, col_num), collapse = &#39;&#39; ) } #      if ( length(table) != nchar(align) ) { align &lt;- NULL } #    side &lt;- sapply(1:nchar(align), function(x) { letter &lt;- substr(align, x, x) switch (letter, &#39;l&#39; = &#39;right&#39;, &#39;r&#39; = &#39;left&#39;, &#39;c&#39; = &#39;both&#39;, &#39;left&#39; ) }) #   t_names &lt;- names(table) #    names_length &lt;- sapply(t_names, nchar) value_length &lt;- sapply(table, function(x) max(nchar(as.character(x)))) max_length &lt;- ifelse(value_length &gt; names_length, value_length, names_length) #        +   indents -  t_names &lt;- mapply(str_pad, string = t_names, width = max_length + indents, side = side) #    str_names &lt;- str_c(t_names, collapse = &#39;&#39;) #    str_pad rules &lt;- list(string = table, width = max_length + indents, side = side) #        t_str &lt;- pmap_df( rules, str_pad )%&gt;% unite(&quot;data&quot;, everything(), remove = TRUE, sep = &#39;&#39;) %&gt;% unlist(data) %&gt;% str_c(collapse = &#39;\\n&#39;) #     4096    if ( nchar(t_str) &gt;= 4021 ) { warning(&#39;   4096 !&#39;) t_str &lt;- substr(t_str, 1, 4021) } #        code_block &lt;- switch(parse_mode, &#39;Markdown&#39; = c(&#39;```&#39;, &#39;```&#39;), &#39;HTML&#39; = c(&#39;&lt;code&gt;&#39;, &#39;&lt;/code&gt;&#39;)) #   code res &lt;- str_c(code_block[1], str_names, t_str, code_block[2], sep = &#39;\\n&#39;) return(res) } #    bot &lt;- Bot(&#39;1165649194:AAFkDqIzQ6Wq5GV0YU7PmEZcv1gmWIFIB_8&#39;) #  ID  # (    ) chat_id &lt;- bot$getUpdates()[[1]]$from_chat_id() #   ToothGrowth TG &lt;- to_tg_table( head(ToothGrowth, 20) ) #    Telegram bot$sendMessage(chat_id, TG, &#39;Markdown&#39;)  2.1  ,     /sum            ,   . : library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #  ,      summing &lt;- function(bot, update, args) { #         x &lt;- sum(as.integer(args)) #   msg &lt;- paste0(&#39;  : &#39;, x) #   bot$sendMessage(update$message$chat_id, msg, &#39;Markdown&#39;) } #   h_sum &lt;- CommandHandler(&#39;sum&#39;, summing, pass_args = TRUE) #     updater &lt;- updater + h_sum #   updater$start_polling()  3.1  ,    Reply .  Reply      .       Inline     6  . Africa/Cairo America/Chicago Europe/Moscow Asia/Bangkok Europe/Kiev Australia/Sydney  Inline     2  ,    .       Inline          API worldtimeapi.org.    API: http://worldtimeapi.org/api/timezone/{area}/:{location}.  {area}  ,  Europe,  {location}  ,  Kiev.          datetime. : library(telegram.bot) library(httr) library(stringr) #    Updater updater &lt;- Updater(&#39;  &#39;) #   start &lt;- function(bot, update) { #  Reply  RKM &lt;- ReplyKeyboardMarkup( keyboard = list( list( KeyboardButton(&#39;&#39;) ) )) #  Reply  bot$sendMessage(update$message$chat_id, &#39; &#39;, &#39;Markdown&#39;, reply_markup = RKM) } #  inline  inline &lt;- function(bot, update) { IKM &lt;- InlineKeyboardMarkup( inline_keyboard = list( list( InlineKeyboardButton(text = &#39;Africa/Cairo&#39;, callback_data = &#39;Africa/Cairo&#39;), InlineKeyboardButton(text = &#39;America/Chicago&#39;, callback_data = &#39;America/Chicago&#39;) ), list( InlineKeyboardButton(text = &#39;Europe/Moscow&#39;, callback_data = &#39;Europe/Moscow&#39;), InlineKeyboardButton(text = &#39;Asia/Bangkok&#39;, callback_data = &#39;Asia/Bangkok&#39;) ), list( InlineKeyboardButton(text = &#39;Europe/Kiev&#39;, callback_data = &#39;Europe/Kiev&#39;), InlineKeyboardButton(text = &#39;Australia/Sydney&#39;, callback_data = &#39;Australia/Sydney&#39;) ) )) #  Reply  bot$sendMessage(update$message$chat_id, &#39; &#39;, &#39;Markdown&#39;, reply_markup = IKM) } #     curtime &lt;- function(bot, update) { #  ,      bot$answerCallbackQuery(callback_query_id = update$callback_query$id) #    data &lt;- update$callback_query$data #      geo &lt;- unlist(strsplit(data, split = &#39;/&#39;)) #  URL url &lt;- str_glue(&#39;http://worldtimeapi.org/api/timezone/{geo[1]}/{geo[2]}&#39;) #   API answer &lt;- GET(url) #   res &lt;- content(answer) #   msg &lt;- str_glue(&#39;   {data}: {res$datetime}&#39;) #   bot$sendMessage(update$from_chat_id(), msg, &#39;Markdown&#39;) } #   Reply  MessageFilters$start &lt;- BaseFilter( function(message) { message$text == &#39;&#39; } ) #  h_start &lt;- CommandHandler(&#39;start&#39;, start) h_time &lt;- MessageHandler(inline, MessageFilters$start) h_cb &lt;- CallbackQueryHandler(curtime) #     updater &lt;- updater + h_start + h_time + h_cb #   updater$start_polling()  4.1        . ..   /start      1  50.     5    .         ,      ,         ,      .           ,      . :           . CREATE TABLE chat_data ( chat_id BIGINT PRIMARY KEY UNIQUE, attempt INTEGER, number INTEGER );        . # write chat data # write chat data set_chat_data &lt;- function(chat_id, field, value) { con &lt;- dbConnect(SQLite(), db) # upsert   dbExecute(con, str_interp(&quot; INSERT INTO chat_data (chat_id, ${field}) VALUES(${chat_id}, &#39;${value}&#39;) ON CONFLICT(chat_id) DO UPDATE SET ${field}=&#39;${value}&#39;; &quot;) ) dbDisconnect(con) } # read chat data get_chat_data &lt;- function(chat_id, field) { con &lt;- dbConnect(SQLite(), db) # upsert   data &lt;- dbGetQuery(con, str_interp(&quot; SELECT ${field} FROM chat_data WHERE chat_id = ${chat_id}; &quot;) ) dbDisconnect(con) return(data[[field]]) }     : library(RSQLite) library(DBI) library(telegram.bot) library(stringr) #    Updater updater &lt;- Updater(&#39;  &#39;) #    db &lt;- &quot;   /bot.db&quot; start &lt;- function(bot, update) { #    num &lt;- round(runif(1, 1, 50), 0) #        set_chat_data( update$message$chat_id, &#39;number&#39;, num) set_chat_data( update$message$chat_id, &#39;attempt&#39;, 1) #  Reply  bot$sendMessage(update$message$chat_id, &#39; ,  ,   .&#39;, &#39;Markdown&#39;) } attempt &lt;- function(bot, update) { num &lt;- get_chat_data(update$message$chat_id, &#39;number&#39;) att &lt;- get_chat_data(update$message$chat_id, &#39;attempt&#39;) user_num &lt;- update$message$text if ( user_num &lt; num ) { bot$sendMessage(update$message$chat_id, paste0(&#39; : &#39;, att, &quot;.   &quot;), &#39;Markdown&#39;) } else if ( user_num &gt; num ) { bot$sendMessage(update$message$chat_id, paste0(&#39; : &#39;, att, &quot;.   &quot;), &#39;Markdown&#39;) } else { bot$sendMessage(update$message$chat_id, paste0(&#39; : &#39;, att, &quot;. ,   !&quot;), &#39;Markdown&#39;) set_chat_data( update$message$chat_id, &#39;attempt&#39;, 0) } if ( att == 5 &amp; user_num != num ) { bot$sendMessage(update$message$chat_id, paste0(&quot; ,    &quot;, num), &#39;Markdown&#39;) set_chat_data( update$message$chat_id, &#39;attempt&#39;, 0) } set_chat_data( update$message$chat_id, &#39;attempt&#39;, att + 1) } #       MessageFilters$attempt &lt;- BaseFilter(function(message) { att &lt;- get_chat_data(message$chat_id, &#39;attempt&#39;) 0 &lt; att &amp; att &lt; 6 } ) #  h_start &lt;- CommandHandler(&#39;start&#39;, start) h_attempt &lt;- MessageHandler(attempt, MessageFilters$attempt &amp; !MessageFilters$command) #  updater &lt;- updater + h_start + h_attempt #  updater$start_polling()  5.1   2.1   ,     ,    , ,         . : library(telegram.bot) #    Updater updater &lt;- Updater(&#39;  &#39;) #  ,      summing &lt;- function(bot, update, args) { if ( update$message$from$username == &#39;YourUsername&#39; ) { #         x &lt;- sum(as.integer(args)) #   msg &lt;- paste0(&#39;  : &#39;, x) #   bot$sendMessage(update$message$chat_id, msg, &#39;Markdown&#39;) } else { #   bot$sendMessage(update$message$chat_id, &#39;         !&#39;, &#39;Markdown&#39;) } } #   h_sum &lt;- CommandHandler(&#39;sum&#39;, summing, pass_args = TRUE) #     updater &lt;- updater + h_sum #   updater$start_polling() "]]
